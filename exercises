pragma circom 2.1.4;


template Num2Bits (nBits) {
    signal input in;

    signal output b[nBits];

    for (var i = 0; i < nBits; i++){
        b[i] <-- (in \ (2**i)) % 2;
    }

    var accum = 0;
    for (var i = 0; i < nBits; i++){
        accum += b[i] * (2 ** i);
    }
    
    accum === in;
    for (var i = 0; i < nBits; i++){
        0 === b[i] * (b[i] - 1);
    }
}

template isZero() {
    signal input in;
    signal output out;
    
    signal inv;

    inv <-- in != 0 ? 1/in : 0;

    out <== -in*inv +1;
    in*out === 0;
}

template IsEqual() {
    signal input in[2];
    signal output out;

    signal dif;

    dif <-- in[0]-in[1];
    component difference = isZero();
    difference.in <== dif;

    out <== difference.out;
}

template LessThan(n) {
    assert(n <= 252);
    signal input in[2];
    signal output out;

    component n2b = Num2Bits(n+1);

    n2b.in <== in[0]+ (1<<n) - in[1];

    out <== 1-n2b.out[n];
}

template Selector(nChoices){
    signal input in[nChoices];
    signal input index;

    signal output out;


}

component main = IsEqual();

/* INPUT = {
    "in": ["11","11"]
} */
